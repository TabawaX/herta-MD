const FormData = require("form-data");
const Jimp = require("jimp");
const uploadImage = require('../function/uploadImage.js');
const fetch = require('node-fetch')
const fs = require('fs')
let { webp2png } = require('../function/webp2mp4')
let { webp2mp4 } = require('../function/webp2mp4')


let anime4kcd = {};
let dehazeCooldown = {};
let recolorCooldown = {};
let blurCooldown = {};
let gridCooldown = {};
let jokowiCooldown = {};
let toimgCooldown = {};
let realisticCooldown = {};
let midjourneyCooldown = {};
let togifCooldown = {};

let handler = async (m, { conn, usedPrefix, command, text }) => {
    let pengguna = global.db.data.users[m.sender];
    let isPrems = pengguna.premium;
    let isVip = pengguna.vip; 
    let isGroup = m.isGroup;

    if (pengguna.limit < 0 && !isVip && !isPrems) {
        return conn.reply(m.chat, "Uppss Limit Kamu Habis\n\nMau Limit Lagiw?\n*!premium*", m);
    }

    let cooldownDuration = isPrems || (isGroup && isVip) ? 20000 : 180000;

    switch (command) { 
       case "ppcp":
       case "ppcouple": {
    try {
        let req_herta = JSON.parse(fs.readFileSync('../json/ppcp.json', 'utf-8'));
        let cp = req_herta[Math.floor(Math.random() * req_herta.length)];

        
        conn.sendFile(m.chat, cp.cewenya, 'pp.jpg', 'Foto cowonya menyusul..', m)
            .catch(err => console.error(err));
        
        
        await sleep(8000);
        
       
        conn.sendFile(m.chat, cp.cowonya, 'pria.jpg', 'Done.. ketik !premium untuk menjadi membership!', m)
            .catch(err => console.error(err));

        
        if (!isVip && !isPrems) {
            pengguna.limit -= 1;
        }
    } catch (error) {
        console.error(error);
    }
    break;
}
case "midjourney": { 
    if (midjourneyCooldown[m.sender] && midjourneyCooldown[m.sender] > Date.now()) {
        let midjourneyyy = (midjourneyCooldown[m.sender] - Date.now()) / 1000;
        let midjourneyyprem = isPrems ? "Waktu Kamu Di Kurangi Menjadi 20 detik" : "Dapat Membeli !premium untuk mengurangi waktu cooldown menjadi 20 detik";
        return conn.reply(m.chat, `Kamu perlu menunggu *${midjourneyyy.toFixed(0)}* detik lagi untuk Membuat Stable Diffusion Realistic\n\n*Benefit Premium*: ${midjourneyyprem}`, m);
    }
       
    if (!text) return m.reply('Masukan teks untuk diubah menjadi gambar');

    try { 
        await m.reply(wait); // Pastikan 'wait' didefinisikan
        let midjourneyi = await fetch(`https://api.yanzbotz.my.id/api/text2img/midjourney?prompt=${text}&apiKey=${yanz}`);
        let midjourneyd = await midjourneyi.arrayBuffer(); // Mengambil data gambar sebagai array buffer
        conn.sendFile(m.chat, Buffer.from(midjourneyd), 'midjourney.jpg', null, m); // Mengirimkan data gambar sebagai file 
    
        if (isVip && !isPrems) {
            // Tidak mengurangi limit
        } else if (!isPrems) {
            pengguna.limit -= 1;
        } 
        
        midjourneyCooldown[m.sender] = Date.now() + cooldownDuration; 
    } catch (e) {
        throw `${e}`;
    }
    break;
}
       case "realistic": {      
       if (realisticCooldown[m.sender] && realisticCooldown[m.sender] > Date.now()) {
        let realisticcc = (realisticCooldown[m.sender] - Date.now()) / 1000;
        let realisticprem = isPrems ? "Waktu Kamu Di Kurangi Menjadi 20 detik" : "Dapat Membeli !premium untuk mengurangi waktu cooldown menjadi 20 detik";
        return conn.reply(m.chat, `Kamu perlu menunggu *${realisticcc.toFixed(0)}* detik lagi untuk Membuat Stable Diffusion Realistic\n\n*Benefit Premium*: ${realisticprem}`, m);
    }
       
  if (!text) return m.reply('Masukan teks untuk diubah menjadi gambar');

  try { 
    await m.reply(wait); // Pastikan 'wait' didefinisikan
    let realistichrt = await fetch(`https://api.yanzbotz.my.id/api/text2img/realistic?prompt=${text}&apiKey=${yanz}`); 
    if (!realistichrt.ok) return m.reply `Koneksi Timeout..`
    let imagerealistic = await realistichrt.arrayBuffer(); // Mengambil data gambar sebagai array buffer
    conn.sendFile(m.chat, Buffer.from(imagerealistic), 'realistic.jpg', null, m); // Mengirimkan data gambar sebagai file 
    if (isVip && !isPrems) {
            // Tidak mengurangi limit
        } else if (!isPrems) {
            pengguna.limit -= 1;
        } 
        realisticCooldown[m.sender] = Date.now() + cooldownDuration; 
  } catch (e) {
    throw `Creator @renki\nError: ${e}`;
  }
  break 
  }
       case "toimg":
       case "toimage": {
    if (toimgCooldown[m.sender] && toimgCooldown[m.sender] > Date.now()) {
        let hertatoimg = (toimgCooldown[m.sender] - Date.now()) / 1000;
        let toimgprem = isPrems ? "Waktu Kamu Di Kurangi Menjadi 20 detik" : "Dapat Membeli !premium untuk mengurangi waktu cooldown menjadi 20 detik";
        return conn.reply(m.chat, `Kamu perlu menunggu *${hertatoimg.toFixed(0)}* detik lagi untuk Mengubah sticker ke foto\n\n*Benefit Premium*: ${toimgprem}`, m);
    }
    if (!m.quoted) throw `*!toimage*\nBalas stiker dengan caption *${usedPrefix + command}*`;
    let mime = m.quoted.mimetype || ''; 
    if (!/webp/.test(mime)) throw `*!toimage*\nBalas stiker dengan caption *${usedPrefix + command}*`;
    m.reply(`Sedang Di Proses..\n*Note: Jika Sticker Mengandung Video Gunakan ".togif"*`);
    let media = await m.quoted.download();
    let out = Buffer.alloc(0);
    if (/webp/.test(mime)) {
        out = await webp2png(media);
    }
    await conn.sendFile(m.chat, out, 'out.png', `Consider To Upgrade Premium? *!premium*`, m, false, {
        thumbnail: Buffer.alloc(0)
    });
    if (isVip && !isPrems) {
        // Tidak mengurangi limit
    } else if (!isPrems) {
        pengguna.limit -= 1;
    }
    toimgCooldown[m.sender] = Date.now() + cooldownDuration;
    break;
}
       case "jokowi": { 
    if (!text) return m.reply(`*!jokowi*\nKirim Teks Untuk Berbicara Kepada Jokowi Menggunakan AI canggih "*${usedPrefix + command} Apa Itu Kehidupan?*"`); 
    
    if (jokowiCooldown[m.sender] && jokowiCooldown[m.sender] > Date.now()) {
        let hertajokowi = (jokowiCooldown[m.sender] - Date.now()) / 1000;
        let jokowiprem = isPrems ? "Waktu Kamu Di Kurangi Menjadi 20 detik" : "Dapat Membeli !premium untuk mengurangi waktu cooldown menjadi 20 detik";
        return conn.reply(m.chat, `Kamu perlu menunggu *${hertajokowi.toFixed(0)}* detik lagi untuk berbicara dengan pak jokowi.\n\n*Benefit Premium*: ${premiumBenefit}`, m);
    }
    
    try {  
        await m.reply(wait); // Pastikan 'wait' telah didefinisikan
        
        let hertarenki = text
        let hertakawai = encodeURIComponent(hertarenki)
        // Melanjutkan dengan permintaan audio
        let audioResponse = await fetch(`https://api.yanzbotz.my.id/api/ai/aijokowivoice?query=${hertakawai}&apiKey=${yanz}`);

        // Mengirim pesan khusus jika tidak ada respon dari Jokowi
        if (!audioResponse.ok) {
            return m.reply("Jokowi tidak merespon");
        }

        // Mengirim respon audio
        let buffer = await audioResponse.buffer();
        let type = require('file-type').fromBuffer(buffer);
        
        if (!type || type.ext !== 'mp3') {
            return m.reply("Jokowi tidak merespon");
        }

        conn.sendFile(m.chat, buffer, 'audio.mp3', '', m, false, { mimetype: 'audio/mp3', ptt: true });
        
        if (isVip && !isPrems) {
            // Tidak mengurangi limit
        } else if (!isPrems) {
            pengguna.limit -= 1;
        } 
        jokowiCooldown[m.sender] = Date.now() + cooldownDuration; 
    } catch (error) {
        throw m.reply("Jokowi tidak merespon");
    }
    break;
}
        case "imggrid": {
   if (gridCooldown[m.sender] && gridCooldown[m.sender] > Date.now()) {
      let grdlft = (gridCooldown[m.sender] - Date.now()) / 1000;
      let banefitgrid = isPrems ? "Waktu Kamu Di kurangi menjadi 20 detik" : "Dapat Membeli !premium untuk mengurangi waktu cooldown menjadi 20 detik";
      return conn.reply(m.chat, `Kamu perlu menunggu *${grdlft.toFixed(0)}* detik lagi untuk menggunakan perintah ini.\n\n*Benefit Premium*: ${banefitgrid}`, m);
     }

    const q = m.quoted ? m.quoted : m;
    const mime = (q.msg || q).mimetype || q.mediaType || '';
    
    if (!mime) {
        return m.reply(`*imggrid*\nMembuat foto 1:1/9:16 kamu terpotongËôè menjadi 1:1 cocok untuk profile ig estetik anda\n\n*Kirim Media/Reply Media Menggunakan caption *"!imggrid"*`);
    } 
    
    try {
        await m.reply(`membuat foto kamu terpisah pisah...`); // Pastikan 'wait' didefinisikan
        const img = await q.download();
        const media = await uploadImage(img);
        // Melakukan Request Ke API's
        const api = await fetch(`https://api.yanzbotz.my.id/api/tools/grid?url=${media}&apiKey=${yanz}`);
        const res = await api.json(); 
        
        let hertafoto = res.result.length; // Menggunakan panjang array hasil dari API sebagai limitnya
        
        for (let i = 0; i < hertafoto; i++) {
            await sleep(7000);
            conn.sendFile(m.chat, res.result[i].image, null, null, m);
        }
         gridCooldown[m.sender] = Date.now() + cooldownDuration; 
        if (isVip && !isPrems) {
        // Tidak mengurangi limit
          } else if (!isPrems) {
          pengguna.limit -= 1;
          }
    } catch (error) {
        return m.reply(`error nih wkwk`);
    }
    break;
}
        case "blur": {
            if (blurCooldown[m.sender] && blurCooldown[m.sender] > Date.now()) {
                let blrleft = (blurCooldown[m.sender] - Date.now()) / 1000;
                let premiumBenefit = isPrems ? "Mengurangi waktu cooldown menjadi 20 detik" : "Dapat Membeli !premium untuk mengurangi waktu cooldown menjadi 20 detik";
                return conn.reply(m.chat, `Kamu perlu menunggu *${blrleft.toFixed(0)}* detik lagi untuk menggunakan perintah ini.\n\n*Benefit Premium*: ${premiumBenefit}`, m);
            }

            let q = m.quoted ? m.quoted : m;
            let mime = (q.msg || q).mimetype || q.mediaType || "";
            let img = await q.download?.();
            if (!img) return m.reply(`Gagal Menemukan Foto Di pesanmu`);
            let level = parseInt(text); // konvert text string ke bilangan bulat
            if (isNaN(level) || level < 1 || level > 5) {
                return m.reply(`*!blur*\nMembuat Blur Foto Anda, Silahkan pilih Blur power anda\n\nkirim media/reply media dengan pesan *blur 1*\n\nTersedia Berberapa Pilihan Power Upscale *1-5*`);
            }
            conn.sendMessage(m.chat, { react: { text: 'È¶ÉÊôµ', key: m.key } });
            let image = await Jimp.read(img);
            image.blur(isNaN(level) ? 5 : parseInt(level));
            image.getBuffer(Jimp.MIME_JPEG, (err, buffer) => {
                if (err) return m.reply(`error nih wkwk`);
                m.reply(buffer);
                blurCooldown[m.sender] = Date.now() + cooldownDuration; 
                if (isVip) {
                    pengguna.limit -= 1;
                } else if (!isPrems) {
                    pengguna.limit -= 2;
                }
            });
            break;
        }
        case "recolor": {
            if (recolorCooldown[m.sender] && recolorCooldown[m.sender] > Date.now()) {
                let timeLeft = (recolorCooldown[m.sender] - Date.now()) / 1000;
                let premiumBenefit = isPrems ? "Mengurangi waktu cooldown menjadi 20 detik" : "Dapat Membeli !premium untuk mengurangi waktu cooldown menjadi 20 drtik";
                return conn.reply(m.chat, `Kamu perlu menunggu *${timeLeft.toFixed(0)}* detik lagi untuk menggunakan perintah ini.\n\n*Benefit Premium*: ${premiumBenefit}`, m);
            }
            
            conn.recolor = conn.recolor ? conn.recolor : {};
            let q = m.quoted ? m.quoted : m;
            let mime = (q.msg || q).mimetype || q.mediaType || "";
            if (!mime)
                throw `*!recolor*\n\nBuat Fotomu Abu Abu, Kirim Foto Dengan caption *!recolor*`;
            if (!/image\/(jpe?g|png)/.test(mime))
                throw `Maaf ${mime} tidak support`;
            else conn.recolor[m.sender] = true;
            await m.reply(wait); // Pastikan 'wait' didefinisikan
            let img = await q.download?.();
            let error;
            try {
                const This = await processing(img, "recolor");
                conn.sendFile(m.chat, This, "", "[ F U L L N E S S ]", m); 
                recolorCooldown[m.sender] = Date.now() + cooldownDuration; 
        if (isVip && !isPrems) {
        // Tidak mengurangi limit
          } else if (!isPrems) {
          pengguna.limit -= 1;
          }
            } catch (er) {
                error = true;
            } finally {
                               if (error) {
                    m.reply("Error Nih :(");
                }
                delete conn.recolor[m.chat];
            }
            break;
        }
        case "anime4k": {
            conn.hdr = conn.hdr ? conn.hdr : {};
            let q = m.quoted ? m.quoted : m;
            let mime = (q.msg || q).mimetype || q.mediaType || ""; 
            if (anime4kcd[m.sender] && anime4kcd[m.sender] > Date.now()) {
                let timeLeft = (anime4kcd[m.sender] - Date.now()) / 1000;
                let premiumBenefit = isPrems ? "Mengurangi waktu cooldown menjadi 20 detik" : "Dapat Membeli !premium untuk mengurangi waktu cooldown menjadi 20 detik";
                return conn.reply(m.chat, `Kamu perlu menunggu *${timeLeft.toFixed(0)}* detik lagi untuk mencari pencarianmu.\n\n*Benefit Premium*: ${premiumBenefit}`, m);
            } 
            anime4kcd[m.sender] = Date.now() + cooldownDuration
            if (!mime)
                return conn.reply(m.chat, `*!anime4k*\nProgram Hd Foto Backup Dari Fullness Network Silahoan Kirim foto dengan caption *${usedPrefix + command}*`, m);
            if (!/image\/(jpe?g|png)/.test(mime))
                return m.reply(`Format ${mime} tidak support`);
            else conn.hdr[m.sender] = true;
            await m.reply(wait); // Pastikan 'wait' didefinisikan
            let img = await q.download?.();
            let error;
            try {
                const This = await processing(img, "enhance");
                conn.sendFile(m.chat, This, "", "[ F U L L N E S S ]", m); 
        if (isVip && !isPrems) {
        // Tidak mengurangi limit
          } else if (!isPrems) {
          pengguna.limit -= 1;
          }
            } catch (er) {
                error = true;
            } finally {
                if (error) {
                    m.reply("Error Nih :(");
                }
                delete conn.hdr[m.sender];
            }
            break;
        }
    }
};

handler.command = ["dehaze", "recolor", "anime4k", "blur", "imggrid", "jokowi", "toimg", "toimage", "realistic", "midjourney", "ppcp", "ppcouple"];
handler.onlyprem = true;
module.exports = handler;

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}


async function processing(urlPath, method) {
    return new Promise(async (resolve, reject) => {
        let Methods = ["enhance", "recolor", "dehaze"];
        method = Methods.includes(method) ? method : Methods[0];

        let buffer,
            Form = new FormData(),
            scheme = "https://inferenceengine.vyro.ai/" + method;

        Form.append("model_version", 1, {
            "Content-Transfer-Encoding": "binary",
            contentType: "multipart/form-data; charset=uttf-8",
        });
        Form.append("image", Buffer.from(urlPath), {
            filename: "enhance_image_body.jpg",
            contentType: "image/jpeg",
        });

        Form.submit(
            {
                url: scheme,
                host: "inferenceengine.vyro.ai",
                path: "/" + method,
                protocol: "https:",
                headers: {
                    "User-Agent": "okhttp/4.9.3",
                    "Connection": "Keep-Alive",
                    "Accept-Encoding": "gzip",
                },
            },
            function (err, res) {
                if (err) reject();
                let data = [];
                res
                    .on("data", function (chunk, resp) {
                        data.push(chunk);
                    })
                    .on("end", () => {
                        resolve(Buffer.concat(data));
                    });
                res.on("error", (e) => {
                    reject();
                });
            }
        );
    });
}


